"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Bot,
  Plus,
  Settings,
  Palette,
  MessageSquare,
  Mic,
  Play,
  Save,
  Copy,
  Edit,
  Trash2,
  Globe,
  Upload,
  Link as LinkIcon,
  Loader2,
  FileText
} from "lucide-react"
import LiveTesting from "@/components/dashboard/live-testing"

// Custom Components
import ChatbotHeader from "@/components/chatbot/ChatbotHeader"
import BuildingBlocks from "@/components/chatbot/BuildingBlocks"
import PromptEditor from "@/components/chatbot/PromptEditor"
import KnowledgeBaseManager from "@/components/chatbot/KnowledgeBaseManager"
import ChatPreview from "@/components/chatbot/ChatPreview"
import DesignTabs from "@/components/chatbot/DesignTabs"

// Einfache Toast-Implementierung
const useToast = () => ({
  toast: ({ title, description, variant }: { title: string; description: string; variant?: string }) => {
    alert(`${title}: ${description}`)
  }
})

interface Chatbot {
  id: string
  name: string
  description: string
  mode: string
  isActive: boolean
  primaryColor: string
  secondaryColor: string
  chatTitle: string
  welcomeMessage: string
  personality: string
  websiteUrl?: string
  knowledgeBase?: string
  logo?: string
  totalChats: number
  leadsGenerated: number
  embedCode?: string
  pdfDocuments?: string[]
}

interface Template {
  id: string
  name: string
  description: string
  category: string
  mode: string
  primaryColor: string
  chatTitle: string
  welcomeMessage: string
  personality: string
  systemPrompt: string
  industry?: string
  useCase?: string
}

export default function BotDesignPage() {
  const [chatbots, setChatbots] = useState<Chatbot[]>([])
  const [templates, setTemplates] = useState<Template[]>([])
  const [selectedBot, setSelectedBot] = useState<string | null>(null)
  const [isCreating, setIsCreating] = useState(false)
  const [isTesting, setIsTesting] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [showTemplates, setShowTemplates] = useState(false)
  const [activeDesignTab, setActiveDesignTab] = useState('elements')
  const { toast } = useToast()

  const [botConfig, setBotConfig] = useState({
    name: "",
    description: "",
    mode: "CHAT",
    primaryColor: "#10b981",
    secondaryColor: "#6b7280",
    fontFamily: "Inter",
    logo: "",
    chatTitle: "Chat Assistant",
    welcomeMessage: "Hallo! Wie kann ich Ihnen helfen?",
    personality: "freundlich und hilfsbereit",
    websiteUrl: "",
    knowledgeBase: "",
    pdfDocuments: [] as string[] // URLs zu hochgeladenen PDFs
  })

  useEffect(() => {
    loadChatbots()
    loadTemplates()
  }, [])

  const loadChatbots = async () => {
    try {
      const response = await fetch('/api/chatbots')
      if (response.ok) {
        const data = await response.json()
        setChatbots(data)
      }
    } catch (error) {
      console.error('Error loading chatbots:', error)
      toast({
        title: "Fehler",
        description: "Chatbots konnten nicht geladen werden",
        variant: "destructive"
      })
    }
  }

  const loadTemplates = async () => {
    try {
      const response = await fetch('/api/templates')
      if (response.ok) {
        const data = await response.json()
        setTemplates(data)
      }
    } catch (error) {
      console.error('Error loading templates:', error)
    }
  }

  const handleCreateNew = () => {
    setSelectedBot(null)
    setIsCreating(true)
    setBotConfig({
      name: "",
      description: "",
      mode: "CHAT",
      primaryColor: "#10b981",
      secondaryColor: "#6b7280",
      fontFamily: "Inter",
      logo: "",
      chatTitle: "Chat Assistant",
      welcomeMessage: "Hallo! Wie kann ich Ihnen helfen?",
      personality: "freundlich und hilfsbereit",
      websiteUrl: "",
      knowledgeBase: "",
      pdfDocuments: []
    })
  }

  const handleUseTemplate = (template: Template) => {
    setBotConfig({
      name: template.name,
      description: template.description,
      mode: template.mode,
      primaryColor: template.primaryColor,
      secondaryColor: "#6b7280",
      fontFamily: "Inter",
      logo: "",
      chatTitle: template.chatTitle,
      welcomeMessage: template.welcomeMessage,
      personality: template.personality,
      websiteUrl: "",
      knowledgeBase: template.systemPrompt,
      pdfDocuments: []
    })
    setShowTemplates(false)
    setIsCreating(true)
  }

  const handleEditBot = (bot: Chatbot) => {
    setSelectedBot(bot.id)
    setIsCreating(true)
    setBotConfig({
      name: bot.name,
      description: bot.description,
      mode: bot.mode,
      primaryColor: bot.primaryColor,
      secondaryColor: bot.secondaryColor,
      fontFamily: "Inter",
      logo: bot.logo || "",
      chatTitle: bot.chatTitle,
      welcomeMessage: bot.welcomeMessage,
      personality: bot.personality,
      websiteUrl: bot.websiteUrl || "",
      knowledgeBase: bot.knowledgeBase || "",
      pdfDocuments: bot.pdfDocuments || []
    })
  }

  const handleSaveBot = async () => {
    if (!botConfig.name.trim()) {
      toast({
        title: "Fehler",
        description: "Bitte geben Sie einen Namen für den Chatbot ein",
        variant: "destructive"
      })
      return
    }

    setIsLoading(true)
    try {
      const url = selectedBot ? `/api/chatbots?id=${selectedBot}` : '/api/chatbots'
      const method = selectedBot ? 'PUT' : 'POST'

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(botConfig)
      })

      if (response.ok) {
        const savedBot = await response.json()
        toast({
          title: "Erfolg",
          description: selectedBot ? "Chatbot aktualisiert" : "Chatbot erstellt"
        })
        setIsCreating(false)
        loadChatbots()
      } else {
        const error = await response.json()
        toast({
          title: "Fehler",
          description: error.error || "Fehler beim Speichern",
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error('Save error:', error)
      toast({
        title: "Fehler",
        description: "Netzwerkfehler beim Speichern",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleDeleteBot = async (botId: string) => {
    if (!confirm('Sind Sie sicher, dass Sie diesen Chatbot löschen möchten?')) {
      return
    }

    try {
      const response = await fetch(`/api/chatbots?id=${botId}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        toast({
          title: "Erfolg",
          description: "Chatbot gelöscht"
        })
        loadChatbots()
      } else {
        toast({
          title: "Fehler",
          description: "Fehler beim Löschen",
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error('Delete error:', error)
      toast({
        title: "Fehler",
        description: "Netzwerkfehler beim Löschen",
        variant: "destructive"
      })
    }
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    const formData = new FormData()
    formData.append('file', file)

    try {
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      })

      if (response.ok) {
        const data = await response.json()
        setBotConfig({ ...botConfig, logo: data.url })
        toast({
          title: "Erfolg",
          description: "Logo hochgeladen"
        })
      } else {
        toast({
          title: "Fehler",
          description: "Fehler beim Hochladen",
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error('Upload error:', error)
      toast({
        title: "Fehler",
        description: "Netzwerkfehler beim Hochladen",
        variant: "destructive"
      })
    }
  }
  
  const handlePdfUpload = async (files: File[]) => {
    if (files.length === 0) return
    
    setIsLoading(true)
    
    try {
      const uploadPromises = files.map(async (file) => {
        const formData = new FormData()
        formData.append('file', file)
        
        const response = await fetch('/api/upload', {
          method: 'POST',
          body: formData
        })
        
        if (!response.ok) {
          throw new Error(`Fehler beim Hochladen von ${file.name}`)
        }
        
        return await response.json()
      })
      
      const results = await Promise.all(uploadPromises)
      
      // URLs der hochgeladenen PDFs zum botConfig hinzufügen
      const pdfUrls = results.map(result => result.url)
      
      // Aktualisiere den Chatbot mit den PDF-URLs
      setBotConfig(prev => ({
        ...prev,
        pdfDocuments: [...prev.pdfDocuments || [], ...pdfUrls]
      }))
      
      toast({
        title: "Erfolg",
        description: `${files.length} PDF-Dokument${files.length > 1 ? 'e' : ''} hochgeladen`
      })
      
    } catch (error) {
      console.error('PDF upload error:', error)
      toast({
        title: "Fehler",
        description: error instanceof Error ? error.message : "Fehler beim PDF-Upload",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  const ChatPreview = () => (
    <div className="bg-white rounded-lg shadow-lg max-w-sm mx-auto">
      <div 
        className="p-4 rounded-t-lg text-white"
        style={{ backgroundColor: botConfig.primaryColor }}
      >
        <div className="flex items-center space-x-2">
          {botConfig.logo ? (
            <img src={botConfig.logo} alt="Logo" className="w-8 h-8 rounded-full" />
          ) : (
            <Bot className="w-8 h-8" />
          )}
          <div>
            <h3 className="font-medium">{botConfig.chatTitle || "Chat Assistant"}</h3>
            <p className="text-xs opacity-90">Online</p>
          </div>
        </div>
      </div>
      <div className="p-4 space-y-3">
        <div className="bg-slate-100 rounded-lg p-3 max-w-[80%]">
          <p className="text-sm">{botConfig.welcomeMessage || "Hallo! Wie kann ich Ihnen helfen?"}</p>
        </div>
        <div className="bg-blue-500 text-white rounded-lg p-3 max-w-[80%] ml-auto">
          <p className="text-sm">Hallo, ich interessiere mich für Ihre Dienstleistungen.</p>
        </div>
        <div className="bg-slate-100 rounded-lg p-3 max-w-[80%]">
          <p className="text-sm">Das freut mich zu hören! Gerne helfe ich Ihnen weiter. Können Sie mir mehr über Ihre Anforderungen erzählen?</p>
        </div>
      </div>
      <div className="p-4 border-t">
        <div className="flex items-center space-x-2">
          <input 
            type="text" 
            placeholder="Nachricht eingeben..."
            className="flex-1 p-2 border rounded-lg text-sm"
            disabled
          />
          <Button size="sm" style={{ backgroundColor: botConfig.primaryColor }}>
            <MessageSquare className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  )

  if (isCreating) {
    // Aktiver Tab für das Design
    const [activeDesignTab, setActiveDesignTab] = useState('elements');
    
    return (
      <div className="relative flex size-full min-h-screen flex-col bg-white group/design-root overflow-x-hidden" style={{fontFamily: 'Manrope, "Noto Sans", sans-serif'}}>
        <div className="layout-container flex h-full grow flex-col">
          <ChatbotHeader 
            onCreateNew={handleCreateNew} 
            userImage="https://lh3.googleusercontent.com/aida-public/AB6AXuBgcwY6fKpmR3C6QqccxAjxzQ0zLHPpckbGVZ6926gmhnAi5zg8TXX9-3Teq5NmgHoR9aK3OgHH-OHgXf3x6N75eJCU6-eWC8NW4iJ5wLZoZWy-gvEafMO8TNPwkEGNuw_WcEhGnWybPaXEAJ6VLodZQ2FWU_szulYVGlVnJ_BQ0jRNwaRvvW_QYXD_aa9znu7exSCKke1msS_MiVXbMx4mcrVHND-EOOUE8QL8ympPvV5BGC-t7i5Z8JJ7NHPMJ2aIIwieRSSDyko" 
          />
          
          <div className="px-6 py-3">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-[32px] font-bold text-[#131712] tracking-light leading-tight">
                  {selectedBot ? "Chatbot bearbeiten" : "Neuen Chatbot erstellen"}
                </h1>
                <p className="text-[#6d8566] text-sm mt-1">
                  Gestalten Sie Ihren Chatbot mit dem Baukastensystem
                </p>
              </div>
              <div className="flex space-x-2">
                <Button 
                  variant="outline" 
                  onClick={() => setIsCreating(false)}
                  className="rounded-full"
                >
                  Zurück
                </Button>
                <Button 
                  onClick={() => setIsTesting(true)}
                  className="rounded-full bg-[#f1f4f1] text-[#131712] hover:bg-[#dee4dc]"
                >
                  <Play className="w-4 h-4 mr-2" />
                  Live Test
                </Button>
                <Button 
                  onClick={handleSaveBot} 
                  disabled={isLoading}
                  className="rounded-full bg-[#53d22c] text-[#131712] hover:bg-[#48b826]"
                >
                  {isLoading ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Save className="w-4 h-4 mr-2" />
                  )}
                  {isLoading ? "Speichert..." : "Speichern"}
                </Button>
              </div>
            </div>
          </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Configuration */}
          <div className="lg:col-span-2">
            <Tabs defaultValue="basic" className="space-y-6">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="basic">Grundlagen</TabsTrigger>
                <TabsTrigger value="design">Design</TabsTrigger>
                <TabsTrigger value="behavior">Verhalten</TabsTrigger>
                <TabsTrigger value="knowledge">Wissen</TabsTrigger>
              </TabsList>

              <TabsContent value="basic" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Grundeinstellungen</CardTitle>
                    <CardDescription>
                      Name, Beschreibung und Modus Ihres Chatbots
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="name">Name</Label>
                      <Input
                        id="name"
                        value={botConfig.name}
                        onChange={(e) => setBotConfig({...botConfig, name: e.target.value})}
                        placeholder="z.B. Vertriebs-Bot"
                      />
                    </div>
                    <div>
                      <Label htmlFor="description">Beschreibung</Label>
                      <Textarea
                        id="description"
                        value={botConfig.description}
                        onChange={(e) => setBotConfig({...botConfig, description: e.target.value})}
                        placeholder="Kurze Beschreibung des Chatbot-Zwecks"
                      />
                    </div>
                    <div>
                      <Label htmlFor="mode">Modus</Label>
                      <Select value={botConfig.mode} onValueChange={(value) => setBotConfig({...botConfig, mode: value})}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="CHAT">
                            <div className="flex items-center">
                              <MessageSquare className="w-4 h-4 mr-2" />
                              Chat-Modus
                            </div>
                          </SelectItem>
                          <SelectItem value="VOICE">
                            <div className="flex items-center">
                              <Mic className="w-4 h-4 mr-2" />
                              Live-Speaking
                            </div>
                          </SelectItem>
                          <SelectItem value="HYBRID">
                            <div className="flex items-center">
                              <Bot className="w-4 h-4 mr-2" />
                              Hybrid (Chat + Voice)
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="design" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Design & Branding</CardTitle>
                    <CardDescription>
                      Passen Sie das Aussehen an Ihr Branding an
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="primaryColor">Primärfarbe</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            id="primaryColor"
                            value={botConfig.primaryColor}
                            onChange={(e) => setBotConfig({...botConfig, primaryColor: e.target.value})}
                            className="w-12 h-10 rounded border"
                          />
                          <Input
                            value={botConfig.primaryColor}
                            onChange={(e) => setBotConfig({...botConfig, primaryColor: e.target.value})}
                            placeholder="#10b981"
                          />
                        </div>
                      </div>
                      <div>
                        <Label htmlFor="secondaryColor">Sekundärfarbe</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            id="secondaryColor"
                            value={botConfig.secondaryColor}
                            onChange={(e) => setBotConfig({...botConfig, secondaryColor: e.target.value})}
                            className="w-12 h-10 rounded border"
                          />
                          <Input
                            value={botConfig.secondaryColor}
                            onChange={(e) => setBotConfig({...botConfig, secondaryColor: e.target.value})}
                            placeholder="#6b7280"
                          />
                        </div>
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="chatTitle">Chat-Titel</Label>
                      <Input
                        id="chatTitle"
                        value={botConfig.chatTitle}
                        onChange={(e) => setBotConfig({...botConfig, chatTitle: e.target.value})}
                        placeholder="Chat Assistant"
                      />
                    </div>
                    <div>
                      <Label htmlFor="logo">Logo URL</Label>
                      <div className="flex space-x-2">
                        <Input
                          id="logo"
                          value={botConfig.logo}
                          onChange={(e) => setBotConfig({...botConfig, logo: e.target.value})}
                          placeholder="https://example.com/logo.png"
                        />
                        <Button variant="outline" size="sm" onClick={() => document.getElementById('logo-upload')?.click()}>
                          <Upload className="w-4 h-4" />
                        </Button>
                        <input
                          id="logo-upload"
                          type="file"
                          accept="image/*"
                          onChange={handleFileUpload}
                          className="hidden"
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="behavior" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Verhalten & Persönlichkeit</CardTitle>
                    <CardDescription>
                      Definieren Sie, wie Ihr Chatbot kommuniziert
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="welcomeMessage">Begrüßungsnachricht</Label>
                      <Textarea
                        id="welcomeMessage"
                        value={botConfig.welcomeMessage}
                        onChange={(e) => setBotConfig({...botConfig, welcomeMessage: e.target.value})}
                        placeholder="Hallo! Wie kann ich Ihnen helfen?"
                      />
                    </div>
                    <div>
                      <Label htmlFor="personality">Persönlichkeit</Label>
                      <Input
                        id="personality"
                        value={botConfig.personality}
                        onChange={(e) => setBotConfig({...botConfig, personality: e.target.value})}
                        placeholder="freundlich und hilfsbereit"
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="knowledge" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Wissensbasis</CardTitle>
                    <CardDescription>
                      Fügen Sie Inhalte hinzu, die Ihr Chatbot kennen soll
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="websiteUrl">Website URL scannen</Label>
                      <div className="flex space-x-2">
                        <Input
                          id="websiteUrl"
                          value={botConfig.websiteUrl}
                          onChange={(e) => setBotConfig({...botConfig, websiteUrl: e.target.value})}
                          placeholder="https://ihre-website.de"
                        />
                        <Button 
                          variant="outline" 
                          onClick={async () => {
                            if (!botConfig.websiteUrl || !botConfig.websiteUrl.trim().startsWith('http')) {
                              toast({
                                title: "Fehler",
                                description: "Bitte geben Sie eine gültige URL ein (beginnend mit http:// oder https://)",
                                variant: "destructive"
                              });
                              return;
                            }
                            
                            setIsLoading(true);
                            try {
                              const response = await fetch('/api/website-scanner', {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ url: botConfig.websiteUrl })
                              });
                              
                              if (!response.ok) {
                                const error = await response.json();
                                throw new Error(error.error || "Fehler beim Scannen der Website");
                              }
                              
                              const data = await response.json();
                              
                              // Extrahierten Text zur Wissensbasis hinzufügen
                              setBotConfig(prev => ({
                                ...prev,
                                knowledgeBase: prev.knowledgeBase ? 
                                  `${prev.knowledgeBase}\n\n--- Inhalte von ${botConfig.websiteUrl} ---\n${data.textContent}` :
                                  `--- Inhalte von ${botConfig.websiteUrl} ---\n${data.textContent}`
                              }));
                              
                              toast({
                                title: "Erfolg",
                                description: `Website gescannt und ${data.extractedChars.toLocaleString()} Zeichen extrahiert`
                              });
                              
                            } catch (error) {
                              console.error('Website scan error:', error);
                              toast({
                                title: "Fehler",
                                description: error instanceof Error ? error.message : "Fehler beim Scannen der Website",
                                variant: "destructive"
                              });
                            } finally {
                              setIsLoading(false);
                            }
                          }}
                          disabled={isLoading}
                        >
                          {isLoading ? (
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          ) : (
                            <Globe className="w-4 h-4 mr-2" />
                          )}
                          Scannen
                        </Button>
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="knowledgeBase">Zusätzliches Wissen</Label>
                      <Textarea
                        id="knowledgeBase"
                        value={botConfig.knowledgeBase}
                        onChange={(e) => setBotConfig({...botConfig, knowledgeBase: e.target.value})}
                        placeholder="Fügen Sie hier zusätzliche Informationen hinzu..."
                        rows={6}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>PDF-Dokumente</Label>
                      <div 
                        className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center cursor-pointer hover:border-emerald-300 hover:bg-emerald-50/30 transition-colors"
                        onClick={() => document.getElementById('pdf-upload')?.click()}
                        onDragOver={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          e.currentTarget.classList.add('border-emerald-300', 'bg-emerald-50/30');
                        }}
                        onDragLeave={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          e.currentTarget.classList.remove('border-emerald-300', 'bg-emerald-50/30');
                        }}
                        onDrop={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          e.currentTarget.classList.remove('border-emerald-300', 'bg-emerald-50/30');
                          
                          const files = Array.from(e.dataTransfer.files);
                          if (files.length > 0) {
                            const pdfFiles = files.filter(file => file.type === 'application/pdf');
                            if (pdfFiles.length > 0) {
                              handlePdfUpload(pdfFiles);
                            } else {
                              toast({
                                title: "Fehler",
                                description: "Bitte nur PDF-Dateien hochladen",
                                variant: "destructive"
                              });
                            }
                          }
                        }}
                      >
                        <Upload className="w-8 h-8 text-slate-400 mx-auto mb-2" />
                        <p className="text-sm text-slate-600">PDF-Dateien hier ablegen oder klicken zum Hochladen</p>
                      </div>
                      <input
                        id="pdf-upload"
                        type="file"
                        accept="application/pdf"
                        multiple
                        onChange={(e) => {
                          if (e.target.files && e.target.files.length > 0) {
                            handlePdfUpload(Array.from(e.target.files));
                          }
                        }}
                        className="hidden"
                      />
                      
                      {/* Anzeige der hochgeladenen PDF-Dokumente */}
                      {botConfig.pdfDocuments && botConfig.pdfDocuments.length > 0 && (
                        <div className="mt-4">
                          <h4 className="text-sm font-medium mb-2">Hochgeladene Dokumente:</h4>
                          <div className="space-y-2">
                            {botConfig.pdfDocuments.map((pdfUrl, index) => {
                              const filename = pdfUrl.split('/').pop() || `Dokument ${index + 1}`;
                              return (
                                <div key={index} className="flex items-center justify-between p-2 bg-slate-50 rounded-md border border-slate-200">
                                  <div className="flex items-center">
                                    <FileText className="w-4 h-4 text-slate-500 mr-2" />
                                    <span className="text-sm truncate" style={{ maxWidth: '200px' }}>
                                      {filename}
                                    </span>
                                  </div>
                                  <Button 
                                    variant="ghost" 
                                    size="sm" 
                                    onClick={() => {
                                      setBotConfig(prev => ({
                                        ...prev,
                                        pdfDocuments: prev.pdfDocuments.filter(url => url !== pdfUrl)
                                      }));
                                    }}
                                  >
                                    <Trash2 className="w-4 h-4 text-slate-500 hover:text-red-500" />
                                  </Button>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Preview */}
          <div>
            <Card className="sticky top-6">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Bot className="w-5 h-5 mr-2" />
                  Live-Vorschau
                </CardTitle>
                <CardDescription>
                  So wird Ihr Chatbot aussehen
                </CardDescription>
              </CardHeader>
              <CardContent>
                <ChatPreview />
              </CardContent>
            </Card>
          </div>
        </div>

        {/* LiveTesting Komponente */}
        <LiveTesting 
          isOpen={isTesting} 
          onClose={() => setIsTesting(false)} 
          chatbotConfig={botConfig}
          chatbotId={selectedBot || undefined}
        />
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-900">Bot Design</h1>
          <p className="text-slate-600 mt-1">
            Erstellen und verwalten Sie Ihre Chatbots
          </p>
        </div>
        <Button onClick={handleCreateNew}>
          <Plus className="w-4 h-4 mr-2" />
          Neuen Bot erstellen
        </Button>
      </div>

      {/* Templates Dialog */}
      <Dialog open={showTemplates} onOpenChange={setShowTemplates}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Vorlage auswählen</DialogTitle>
            <DialogDescription>
              Starten Sie schnell mit einer vorgefertigten Vorlage
            </DialogDescription>
          </DialogHeader>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
            {templates.map((template) => (
              <Card key={template.id} className="cursor-pointer hover:border-emerald-300 transition-colors" onClick={() => handleUseTemplate(template)}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{template.name}</CardTitle>
                    <Badge variant="outline">{template.category}</Badge>
                  </div>
                  <CardDescription>{template.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center text-sm">
                      {template.mode === "CHAT" && <MessageSquare className="w-4 h-4 mr-2" />}
                      {template.mode === "VOICE" && <Mic className="w-4 h-4 mr-2" />}
                      {template.mode === "HYBRID" && <Bot className="w-4 h-4 mr-2" />}
                      <span>{template.mode}</span>
                    </div>
                    {template.industry && (
                      <div className="text-sm text-slate-600">
                        <strong>Branche:</strong> {template.industry}
                      </div>
                    )}
                    {template.useCase && (
                      <div className="text-sm text-slate-600">
                        <strong>Anwendung:</strong> {template.useCase}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </DialogContent>
      </Dialog>

      {/* Action Buttons */}
      <div className="flex space-x-4 mb-6">
        <Button onClick={handleCreateNew}>
          <Plus className="w-4 h-4 mr-2" />
          Von Grund auf erstellen
        </Button>
        <Button variant="outline" onClick={() => setShowTemplates(true)}>
          <FileText className="w-4 h-4 mr-2" />
          Aus Vorlage erstellen
        </Button>
      </div>

      {/* Existing Bots */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {chatbots.map((bot) => (
          <Card key={bot.id} className="bg-white border-slate-200 hover:shadow-md transition-shadow">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: bot.primaryColor }}
                  ></div>
                  <CardTitle className="text-lg">{bot.name}</CardTitle>
                </div>
                <Badge variant={bot.isActive ? "default" : "secondary"}>
                  {bot.isActive ? "Aktiv" : "Entwurf"}
                </Badge>
              </div>
              <CardDescription>{bot.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-slate-600">Modus:</span>
                  <div className="flex items-center">
                    {bot.mode === "CHAT" && <MessageSquare className="w-4 h-4 mr-1" />}
                    {bot.mode === "VOICE" && <Mic className="w-4 h-4 mr-1" />}
                    {bot.mode === "HYBRID" && <Bot className="w-4 h-4 mr-1" />}
                    <span>{bot.mode === "CHAT" ? "Chat" : bot.mode === "VOICE" ? "Voice" : "Hybrid"}</span>
                  </div>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-slate-600">Gespräche:</span>
                  <span className="font-medium">{bot.totalChats.toLocaleString()}</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-slate-600">Leads:</span>
                  <span className="font-medium text-emerald-600">{bot.leadsGenerated}</span>
                </div>
                <div className="flex space-x-2 pt-2">
                  <Button variant="outline" size="sm" onClick={() => handleEditBot(bot)}>
                    <Edit className="w-4 h-4 mr-1" />
                    Bearbeiten
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => navigator.clipboard.writeText(bot.embedCode || '')}>
                    <Copy className="w-4 h-4 mr-1" />
                    Code
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => handleDeleteBot(bot.id)}>
                    <Trash2 className="w-4 h-4 mr-1" />
                    Löschen
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}